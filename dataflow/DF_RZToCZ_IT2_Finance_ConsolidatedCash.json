{
	"name": "DF_RZToCZ_IT2_Finance_ConsolidatedCash",
	"properties": {
		"folder": {
			"name": "Finance/RawToConformed"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Src_RawZone_ConsolidatedCash",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Snk_Synapse_Consolidated_Cash_1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Grouping as string,",
				"          {Cash Type} as string,",
				"          {Company Sector} as string,",
				"          Company as string,",
				"          Bank as string,",
				"          AccountNumber as string,",
				"          {All (USD)} as string,",
				"          {All (USD)(Prev)} as string,",
				"          {Delta All (USD)} as string,",
				"          {USD (CCY)} as string,",
				"          {EUR (CCY)} as string,",
				"          {EGP (CCY)} as string,",
				"          {GBP (CCY)} as string,",
				"          {DZD (CCY)} as string,",
				"          {JPY (CCY)} as string,",
				"          {AED (CCY)} as string,",
				"          {CNY (CCY)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     modifiedAfter: (addDays(currentUTC(),-1)),",
				"     modifiedBefore: (currentUTC()),",
				"     wildcardPaths:[(concat('Finance/Consolidated_Cash/', toString(currentUTC(),'yyyy-MM-dd'),'/Consolidated_Cash.csv'))]) ~> source1",
				"filter1 derive(KPIDate = currentDate(),",
				"          {All (USD)} = toDecimal(replace({All (USD)},',',''),17,2),",
				"          {All (USD)(Prev)} = toDecimal(replace({All (USD)(Prev)},',',''),17,2),",
				"          {Delta All (USD)} = toDecimal(replace({Delta All (USD)},',',''),17,2),",
				"          {USD (CCY)} = toDecimal(replace({USD (CCY)},',',''),17,2),",
				"          {EUR (CCY)} = toDecimal(replace({EUR (CCY)},',',''),17,2),",
				"          {EGP (CCY)} = toDecimal(replace({EGP (CCY)},',',''),17,2),",
				"          {GBP (CCY)} = toDecimal(replace({GBP (CCY)},',',''),17,2),",
				"          {DZD (CCY)} = toDecimal(replace({DZD (CCY)},',',''),17,2),",
				"          {JPY (CCY)} = toDecimal(replace({JPY (CCY)},',',''),17,2),",
				"          {AED (CCY)} = toDecimal(replace({AED (CCY)},',',''),17,2),",
				"          {CNY (CCY)} = toDecimal(replace({CNY (CCY)},',',''),17,2)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Grouping,",
				"          Cash_Type = {Cash Type},",
				"          Company_Sector = {Company Sector},",
				"          Company,",
				"          Bank,",
				"          Account = AccountNumber,",
				"          All_USD = {All (USD)},",
				"          All_USD_Prev = {All (USD)(Prev)},",
				"          Delta_All_USD = {Delta All (USD)},",
				"          USD_CCY = {USD (CCY)},",
				"          EUR_CCY = {EUR (CCY)},",
				"          EGP_CCY = {EGP (CCY)},",
				"          GBP_CCY = {GBP (CCY)},",
				"          DZD_CCY = {DZD (CCY)},",
				"          JPY_CCY = {JPY (CCY)},",
				"          AED_CCY = {AED (CCY)},",
				"          CNY_CCY = {CNY (CCY)},",
				"          KPIDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(KPIDate,",
				"          Grouping,",
				"          Cash_Type,",
				"          Company_Sector,",
				"          Company,",
				"          Bank,",
				"          Account,",
				"          All_USD,",
				"          All_USD_Prev,",
				"          Delta_All_USD,",
				"          USD_CCY,",
				"          EUR_CCY,",
				"          EGP_CCY,",
				"          GBP_CCY,",
				"          DZD_CCY,",
				"          JPY_CCY,",
				"          AED_CCY,",
				"          CNY_CCY),",
				"     Cnt = count(1)) ~> aggregate1",
				"source1 filter(Grouping == '00 Total Balance Sheet Cash') ~> filter1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          KPIDate as date,",
				"          Grouping as string,",
				"          Cash_Type as string,",
				"          Company_Sector as string,",
				"          Company as string,",
				"          Bank as string,",
				"          Account as string,",
				"          All_USD as decimal(17,2),",
				"          All_USD_Prev as decimal(17,2),",
				"          Delta_All_USD as decimal(17,2),",
				"          USD_CCY as decimal(17,2),",
				"          EUR_CCY as decimal(17,2),",
				"          EGP_CCY as decimal(17,2),",
				"          GBP_CCY as decimal(17,2),",
				"          DZD_CCY as decimal(17,2),",
				"          JPY_CCY as decimal(17,2),",
				"          AED_CCY as decimal(17,2),",
				"          CNY_CCY as decimal(17,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['DELETE FROM [conformed].[Consolidated_Cash]\\nWHERE KPIDate <  DATEADD(d, -8, GETDATE())'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          KPIDate,",
				"          Grouping,",
				"          Cash_Type,",
				"          Company_Sector,",
				"          Company,",
				"          Bank,",
				"          Account,",
				"          All_USD,",
				"          All_USD_Prev,",
				"          Delta_All_USD,",
				"          USD_CCY,",
				"          EUR_CCY,",
				"          EGP_CCY,",
				"          GBP_CCY,",
				"          DZD_CCY,",
				"          JPY_CCY,",
				"          AED_CCY,",
				"          CNY_CCY",
				"     )) ~> sink1"
			]
		}
	}
}
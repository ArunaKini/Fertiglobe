{
	"name": "DF_RZToCZ_Board_Finance_BudgetFinanceDetails",
	"properties": {
		"folder": {
			"name": "Finance/RawToConformed"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Src_RawZone_FctConsolidatedFinancialStatement",
						"type": "DatasetReference"
					},
					"name": "SrcFctConsolidatedFinanceStatement"
				},
				{
					"dataset": {
						"referenceName": "DS_Src_RawZone_DimAccount",
						"type": "DatasetReference"
					},
					"name": "SrcDimAccount"
				},
				{
					"dataset": {
						"referenceName": "DS_Src_RawZone_DimEntity",
						"type": "DatasetReference"
					},
					"name": "SrcDimEntity"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Snk_Synapse_Budget_Finance_Details",
						"type": "DatasetReference"
					},
					"name": "conformedFctFinanceDetails"
				}
			],
			"transformations": [
				{
					"name": "JoinFctConsolidationFinancialStatementWithDimAccount"
				},
				{
					"name": "JoinFctConsolidationFinancialStatementWithEntity"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Scenario as integer,",
				"     Version as integer",
				"}",
				"source(output(",
				"          Month as integer,",
				"          Entity as string,",
				"          Account as string,",
				"          Layer as short,",
				"          Counterparty as string,",
				"          {Consolidation Node} as string,",
				"          Scenario as integer,",
				"          {Plan Year} as short,",
				"          Version as integer,",
				"          {PLAN - Conso Layer Value} as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     modifiedAfter: (addDays(currentUTC(), -1)),",
				"     modifiedBefore: (currentUTC()),",
				"     wildcardPaths:['Finance/Fct_Con_Fin_statement/*/FCT_CONSOLIDATED_FINANCIAL_STATEMENTS.csv']) ~> SrcFctConsolidatedFinanceStatement",
				"source(output(",
				"          Account as string,",
				"          {Account Description} as string,",
				"          {Account Type Description} as string,",
				"          {MR Account} as string,",
				"          {MR Account Description} as string,",
				"          {Statuary Account Description} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     modifiedAfter: (addDays(currentUTC(), -1)),",
				"     modifiedBefore: (currentUTC()),",
				"     wildcardPaths:['Finance/Account/*/Account_Details.csv']) ~> SrcDimAccount",
				"source(output(",
				"          Entity as string,",
				"          {Entity Description} as string,",
				"          OCINVT_IFRS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     modifiedAfter: (addDays(currentUTC(), -1)),",
				"     modifiedBefore: (currentUTC()),",
				"     wildcardPaths:['Finance/Entity/*/ENTITY.csv']) ~> SrcDimEntity",
				"SrcFctConsolidatedFinanceStatement, SrcDimAccount join(SrcFctConsolidatedFinanceStatement@Account == SrcDimAccount@Account,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFctConsolidationFinancialStatementWithDimAccount",
				"JoinFctConsolidationFinancialStatementWithDimAccount, SrcDimEntity join(SrcFctConsolidatedFinanceStatement@Entity == SrcDimEntity@Entity,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFctConsolidationFinancialStatementWithEntity",
				"filter1 derive(Revenue = case({Account Type Description} == 'P&L' && ({MR Account} == 'MR_REVENU' || {MR Account} == 'MR_REBATES') && {Consolidation Node} == 'OCI_MENA_FERT',{PLAN - Conso Layer Value},toDouble(0)),",
				"          Adjusted_EBITDA = case (\r",
				"({MR Account} == 'MR_REVENU' ||\r",
				"{MR Account} == 'MR_REBATES' ||\r",
				"{MR Account} == 'MR_VAR' ||\r",
				"{MR Account} == 'MR_COS_IC' ||\r",
				"{MR Account} == 'MR_FIXSTAFF' ||\r",
				"{MR Account} == 'MR_TPSTAFF' ||\r",
				"{MR Account} == 'MR_EXTSERVICE' ||\r",
				"{MR Account} == 'MR_MAINT_SUB' ||\r",
				"{MR Account} == 'MR_TOOLS' ||\r",
				"{MR Account} == 'MR_UTILITIES' ||\r",
				"{MR Account} == 'MR_INSURANCE' ||\r",
				"{MR Account} == 'MR_OTHERPROD_SUB' ||\r",
				"{MR Account} == 'MR_OTHINC_COS' ||\r",
				"{MR Account} == 'LNK_REV' ||\r",
				"{MR Account} == 'MR_LABOUR' ||\r",
				"{MR Account} == 'MR_CONSULTANCY' ||\r",
				"{MR Account} == 'MR_TRAVEL' ||\r",
				"{MR Account} == 'MR_OFFICE_IT' ||\r",
				"{MR Account} == 'MR_OTHER_SGA_SUB' ||\r",
				"{MR Account} == 'MR_OTHPROV' ||\r",
				"{MR Account} == 'MR_MAINTENANCE' ||\r",
				"{MR Account} == 'MR_OTHINC' ||\r",
				"{MR Account} == 'MR_OTHEXP' ||\r",
				"{MR Account} == 'MR_RECHARGE' ||\r",
				"{MR Account} == 'MR_TRANSAC_COSTS' ||\r",
				"{MR Account} == 'MR_EBITDA_Adj')\r",
				"&& {Consolidation Node} == 'OCI_MENA_FERT',\r",
				"{PLAN - Conso Layer Value},toDouble(0)),",
				"          Adjusted_net_income_share = case (\r",
				"({MR Account} == 'MR_REVENU' ||\r",
				"{MR Account} == 'MR_REBATES' ||\r",
				"{MR Account} == 'MR_VAR' ||\r",
				"{MR Account} == 'MR_COS_IC' ||\r",
				"{MR Account} == 'MR_FIXSTAFF' ||\r",
				"{MR Account} == 'MR_TPSTAFF' ||\r",
				"{MR Account} == 'MR_EXTSERVICE' ||\r",
				"{MR Account} == 'MR_MAINT_SUB' ||\r",
				"{MR Account} == 'MR_TOOLS' ||\r",
				"{MR Account} == 'MR_UTILITIES' ||\r",
				"{MR Account} == 'MR_INSURANCE' ||\r",
				"{MR Account} == 'MR_OTHERPROD_SUB' ||\r",
				"{MR Account} == 'MR_OTHINC_COS' ||\r",
				"{MR Account} == 'LNK_REV' ||\r",
				"{MR Account} == 'MR_LABOUR' ||\r",
				"{MR Account} == 'MR_CONSULTANCY' ||\r",
				"{MR Account} == 'MR_TRAVEL' ||\r",
				"{MR Account} == 'MR_OFFICE_IT' ||\r",
				"{MR Account} == 'MR_OTHER_SGA_SUB' ||\r",
				"{MR Account} == 'MR_OTHPROV' ||\r",
				"{MR Account} == 'MR_MAINTENANCE' ||\r",
				"{MR Account} == 'MR_OTHINC' ||\r",
				"{MR Account} == 'MR_OTHEXP' ||\r",
				"{MR Account} == 'MR_RECHARGE' ||\r",
				"{MR Account} == 'MR_TRANSAC_COSTS' ||\r",
				"{MR Account} == 'MR_EBITDA_Adj' ||\r",
				"{MR Account} == 'MR_DEPR' ||\r",
				"{MR Account} == 'MR_DEPR_COS' ||\r",
				"{MR Account} == 'MR_AMORT' ||\r",
				"{MR Account} == 'MR_AMORT_COS' ||\r",
				"{MR Account} == 'MR_IMP' ||\r",
				"{MR Account} == 'LNK_RCH' ||\r",
				"{MR Account} == 'MR_FININC' ||\r",
				"{MR Account} == 'MR_FINCOST' ||\r",
				"{MR Account} == 'MR_FX' ||\r",
				"{MR Account} == 'LNK_FIN' ||\r",
				"{MR Account} == 'MR_INVESTINC' ||\r",
				"{MR Account} == 'MR_CURTAX' ||\r",
				"{MR Account} == 'MR_DEFTAX' ||\r",
				"{MR Account} == 'MR_UTP')  \r",
				"&& {Consolidation Node} == 'OCI_MENA_FERT',{PLAN - Conso Layer Value},toDouble(0)),",
				"          SG_A = case (\r",
				"{MR Account} == 'MR_LABOUR' || \r",
				"{MR Account} == 'MR_CONSULTANCY' ||  \r",
				"{MR Account} == 'MR_TRAVEL' || \r",
				"{MR Account} == 'MR_OFFICE_IT' || \r",
				"{MR Account} == 'MR_OTHINC' || \r",
				"{MR Account} == 'MR_OTHEXP' || \r",
				"{MR Account} == 'MR_RECHARGE' ||\r",
				"{MR Account} == 'MR_TRANSAC_COSTS' ||\r",
				"{MR Account} == 'MR_OTHER_SGA_SUB' ||\r",
				"{MR Account} == 'MR_OTHPROV' ||\r",
				"{MR Account} == 'MR_MAINTENANCE'\r",
				",{PLAN - Conso Layer Value},toDouble(0)),",
				"          Fixed_Cost = case(in(['MR_OTHINC_COS','MR_FIXSTAFF','MR_TPSTAFF','MR_EXTSERVICE','MR_MAINT_SUB','MR_TOOLS','MR_UTILITIES','MR_INSURANCE','MR_OTHERPROD_SUB'],{MR Account}) && {Consolidation Node} == 'OCI_MENA_FERT',{PLAN - Conso Layer Value},toDouble(0)),",
				"          Gas_Cost = case((SrcDimAccount@Account == '40101010' || SrcDimAccount@Account == '40101013'), {PLAN - Conso Layer Value},toDouble(0)),",
				"          Variable_Cost = case(({MR Account} == 'MR_VAR' || {MR Account} == 'MR_COS_IC') && {Consolidation Node} == 'OCI_MENA_FERT', {PLAN - Conso Layer Value},toDouble(0)),",
				"          NCIResult_Cost = case({MR Account} == 'NCIRESULT',{PLAN - Conso Layer Value},toDouble(0))) ~> derivedColumn1",
				"derivedColumn2 select(mapColumn(",
				"          Month,",
				"          Revenue,",
				"          Version,",
				"          RF = Scenario,",
				"          Gas_Cost,",
				"          Variable_Cost,",
				"          Adjusted_EBITDA,",
				"          Account_Type_Description = {Account Type Description},",
				"          Adjusted_Net_Income_Share = Adjusted_net_income_share,",
				"          SG_A,",
				"          MR_Account = {MR Account},",
				"          Fixed_Cost,",
				"          MR_Account_Description = {MR Account Description},",
				"          Statuary_Account_Description = {Statuary Account Description},",
				"          Entity = SrcDimEntity@Entity,",
				"          Entity_Description = {Entity Description},",
				"          OCINVT_IFRS,",
				"          Plan_Year = {Plan Year}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(Month,",
				"          Version,",
				"          RF,",
				"          Account_Type_Description,",
				"          MR_Account,",
				"          MR_Account_Description,",
				"          Statuary_Account_Description,",
				"          Entity,",
				"          Entity_Description,",
				"          OCINVT_IFRS,",
				"          Revenue,",
				"          Gas_Cost,",
				"          Variable_Cost,",
				"          Adjusted_EBITDA,",
				"          Adjusted_Net_Income_Share,",
				"          SG_A,",
				"          Fixed_Cost,",
				"          Plan_Year),",
				"     Cnt = count(1)) ~> aggregate1",
				"JoinFctConsolidationFinancialStatementWithEntity filter(Layer == 400 && {Consolidation Node} == 'OCI_MENA_FERT' && Version == $Version && Scenario == $Scenario && !(in(['3007','3038','3073'],SrcDimEntity@Entity))) ~> filter1",
				"derivedColumn1 derive(Adjusted_net_income_share = Adjusted_net_income_share - NCIResult_Cost) ~> derivedColumn2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Month as integer,",
				"          Revenue as decimal(38,0),",
				"          Version as integer,",
				"          RF as integer,",
				"          Gas_Cost as decimal(38,0),",
				"          Variable_Cost as decimal(38,0),",
				"          Adjusted_EBITDA as decimal(38,0),",
				"          Account_Type_Description as string,",
				"          Adjusted_net_income_share as decimal(38,0),",
				"          SG_A as decimal(38,0),",
				"          MR_Account as string,",
				"          Fixed_Cost as decimal(38,0),",
				"          MR_Account_Description as string,",
				"          Statuary_Account_Description as string,",
				"          Entity as string,",
				"          Entity_Description as string,",
				"          OCINVT_IFRS as string,",
				"          Plan_Year as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Month,",
				"          Revenue,",
				"          Version,",
				"          RF,",
				"          Gas_Cost,",
				"          Variable_Cost,",
				"          Adjusted_EBITDA,",
				"          Account_Type_Description,",
				"          Adjusted_net_income_share = Adjusted_Net_Income_Share,",
				"          SG_A,",
				"          MR_Account,",
				"          Fixed_Cost,",
				"          MR_Account_Description,",
				"          Statuary_Account_Description,",
				"          Entity,",
				"          Entity_Description,",
				"          OCINVT_IFRS,",
				"          Plan_Year",
				"     )) ~> conformedFctFinanceDetails"
			]
		}
	}
}